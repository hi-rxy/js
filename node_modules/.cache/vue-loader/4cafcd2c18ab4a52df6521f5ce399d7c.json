{"remainingRequest":"D:\\wwwroot\\vue-admin-template\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\wwwroot\\vue-admin-template\\src\\views\\menu\\index.vue?vue&type=style&index=0&id=70f07688&scoped=true&lang=css&","dependencies":[{"path":"D:\\wwwroot\\vue-admin-template\\src\\views\\menu\\index.vue","mtime":1645539742761},{"path":"D:\\wwwroot\\vue-admin-template\\node_modules\\css-loader\\dist\\cjs.js","mtime":1645316877405},{"path":"D:\\wwwroot\\vue-admin-template\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1645316879909},{"path":"D:\\wwwroot\\vue-admin-template\\node_modules\\postcss-loader\\src\\index.js","mtime":1645316878550},{"path":"D:\\wwwroot\\vue-admin-template\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1645316876002},{"path":"D:\\wwwroot\\vue-admin-template\\node_modules\\vue-loader\\lib\\index.js","mtime":1645316879025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLWZvcm0taXRlbV9fbGFiZWwgewoKfQouZWwtZm9ybS1pdGVtX19jb250ZW50IHsKICAKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;;AAEA;AACA;;AAEA","file":"index.vue","sourceRoot":"src/views/menu","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!--  搜索开始  -->\n    <div class=\"filter-container\" style=\"margin-bottom: 15px;\">\n      <el-input v-model=\"listQuery.menu_name\" placeholder=\"菜单名称\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n      <el-button v-waves class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        Search\n      </el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        Add\n      </el-button>\n      <el-button v-waves :loading=\"downloadLoading\" class=\"filter-item\" type=\"primary\" icon=\"el-icon-download\" @click=\"handleDownload\">\n        Export\n      </el-button>\n    </div>\n    <!--  搜索结束  -->\n\n    <!--  表格开始  -->\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @sort-change=\"sortChange\"\n    >\n      <!--  字段开始    -->\n      <el-table-column label=\"唯一编号\" prop=\"id\" sortable=\"custom\" align=\"center\" width=\"120\" :class-name=\"getSortClass('id')\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.id }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"菜单\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.menu_name }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"图标\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.icons }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"地址\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.url }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"状态\" class-name=\"status-col\">\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.status | statusFilter\">\n            {{ row.status }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"排序\" prop=\"sort\" sortable=\"custom\" :class-name=\"getSortClass('sort')\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.sort }}</span>\n        </template>\n      </el-table-column>\n      <!--  字段结束   -->\n      <!--  操作开始   -->\n      <el-table-column label=\"Actions\" align=\"center\" width=\"230\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"{row,$index}\">\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleUpdate(row)\">\n            Edit\n          </el-button>\n          <el-button v-if=\"row.status!=='published'\" size=\"mini\" type=\"success\" @click=\"handleModifyStatus(row,'published')\">\n            Publish\n          </el-button>\n          <el-button v-if=\"row.status!=='draft'\" size=\"mini\" @click=\"handleModifyStatus(row,'draft')\">\n            Draft\n          </el-button>\n          <el-button v-if=\"row.status!=='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleDelete(row,$index)\">\n            Delete\n          </el-button>\n        </template>\n      </el-table-column>\n      <!--  操作结束   -->\n    </el-table>\n    <!--  表格结束  -->\n\n    <!--  分页开始  -->\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getList\" />\n    <!--  分页结束  -->\n\n    <!-- form 表单 -->\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"70px\" style=\"width: 400px; margin-left:50px;\">\n        <!--      <el-form-item label=\"Type\" prop=\"type\">-->\n        <!--        <el-select v-model=\"temp.type\" class=\"filter-item\" placeholder=\"Please select\">-->\n        <!--          <el-option v-for=\"item in calendarTypeOptions\" :key=\"item.key\" :label=\"item.display_name\" :value=\"item.key\" />-->\n        <!--        </el-select>-->\n        <!--      </el-form-item>-->\n<!--        <el-form-item label=\"Date\" prop=\"timestamp\">-->\n<!--          <el-date-picker v-model=\"temp.timestamp\" type=\"datetime\" placeholder=\"Please pick a date\" />-->\n<!--        </el-form-item>-->\n        <el-form-item label=\"栏目名称\" prop=\"menu_name\">\n          <el-input v-model=\"temp.menu_name\" />\n        </el-form-item>\n        <el-form-item label=\"Status\">\n          <el-select v-model=\"temp.status\" class=\"filter-item\" placeholder=\"Please select\">\n            <el-option v-for=\"item in statusOptions\" :key=\"item\" :label=\"item\" :value=\"item\" />\n          </el-select>\n        </el-form-item>\n<!--        <el-form-item label=\"Imp\">-->\n<!--          <el-rate v-model=\"temp.importance\" :colors=\"['#99A9BF', '#F7BA2A', '#FF9900']\" :max=\"3\" style=\"margin-top:8px;\" />-->\n<!--        </el-form-item>-->\n        <el-form-item label=\"Remark\">\n          <el-input v-model=\"temp.remark\" :autosize=\"{ minRows: 2, maxRows: 4}\" type=\"textarea\" placeholder=\"Please input\" />\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">\n          Cancel\n        </el-button>\n        <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():updateData()\">\n          Confirm\n        </el-button>\n      </div>\n    </el-dialog>\n    <!-- form 表单 -->\n  </div>\n</template>\n<style scoped>\n.el-form-item__label {\n\n}\n.el-form-item__content {\n  \n}\n</style>\n<script>\nimport { fetchList } from '@/api/menu'\nimport waves from '@/directive/waves' // waves directive\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\n\nexport default {\n  name: 'Menu',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        published: 'success',\n        draft: 'info',\n        deleted: 'danger'\n      }\n      return statusMap[status]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        limit: 2,\n        sort: '+id',\n      },\n      //sortOptions: [{ label: 'ID Ascending', key: '+id' }, { label: 'ID Descending', key: '-id' }],\n      statusOptions: ['published', 'draft', 'deleted'],\n      showReviewer: false,\n      temp: {\n        id: undefined,\n        menu_name: '',\n        icons: '',\n        url: '',\n        sort: 1,\n        status: 'published'\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      dialogPvVisible: false,\n      pvData: [],\n      rules: {\n        menu_name: [{ required: true, message: '栏目名称 is required', trigger: 'blur' }],\n      },\n      downloadLoading: false\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      fetchList(this.listQuery).then(response => {\n        this.list   = response.data.items\n        this.total  = response.data.total\n\n        // Just to simulate the time of the request\n        setTimeout(() => {\n          this.listLoading = false\n        }, 1.5 * 1000)\n      })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getList()\n    },\n    handleModifyStatus(row, status) {\n      this.$message({\n        message: '操作Success',\n        type: 'success'\n      })\n      row.status = status\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      this.sortByColumn(order,prop)\n    },\n    sortByColumn(order,prop) {\n      if (order === 'ascending') {\n        this.listQuery.sort = '+'+prop\n      } else {\n        this.listQuery.sort = '-'+prop\n      }\n      this.handleFilter()\n    },\n    resetTemp() {\n      this.temp = {\n        id: undefined,\n        menu_name: '',\n        icons: '',\n        url: '',\n        sort: 1,\n        status: 'published',\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          this.temp.id = parseInt(Math.random() * 100) + 1024 // mock a id\n          this.temp.author = 'vue-element-admin'\n          // createArticle(this.temp).then(() => {\n          //   this.list.unshift(this.temp)\n          //   this.dialogFormVisible = false\n          //   this.$notify({\n          //     title: 'Success',\n          //     message: 'Created Successfully',\n          //     type: 'success',\n          //     duration: 2000\n          //   })\n          // })\n        }\n      })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.temp.timestamp = new Date(this.temp.timestamp)\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const tempData = Object.assign({}, this.temp)\n          tempData.timestamp = +new Date(tempData.timestamp) // change Thu Nov 30 2017 16:41:05 GMT+0800 (CST) to 1512031311464\n          // updateArticle(tempData).then(() => {\n          //   const index = this.list.findIndex(v => v.id === this.temp.id)\n          //   this.list.splice(index, 1, this.temp)\n          //   this.dialogFormVisible = false\n          //   this.$notify({\n          //     title: 'Success',\n          //     message: 'Update Successfully',\n          //     type: 'success',\n          //     duration: 2000\n          //   })\n          // })\n        }\n      })\n    },\n    handleDelete(row, index) {\n      this.$notify({\n        title: 'Success',\n        message: 'Delete Successfully',\n        type: 'success',\n        duration: 2000\n      })\n      this.list.splice(index, 1)\n    },\n    handleFetchPv(pv) {\n      // fetchPv(pv).then(response => {\n      //   this.pvData = response.data.pvData\n      //   this.dialogPvVisible = true\n      // })\n    },\n    handleDownload() {\n      this.downloadLoading = true\n      import('@/vendor/Export2Excel').then(excel => {\n        const tHeader = ['timestamp', 'title', 'type', 'importance', 'status']\n        const filterVal = ['timestamp', 'title', 'type', 'importance', 'status']\n        const data = this.formatJson(filterVal)\n        excel.export_json_to_excel({\n          header: tHeader,\n          data,\n          filename: 'table-list'\n        })\n        this.downloadLoading = false\n      })\n    },\n    formatJson(filterVal) {\n      return this.list.map(v => filterVal.map(j => {\n        if (j === 'timestamp') {\n          return parseTime(v[j])\n        } else {\n          return v[j]\n        }\n      }))\n    },\n    getSortClass: function(key) {\n      const sort = this.listQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n"]}]}